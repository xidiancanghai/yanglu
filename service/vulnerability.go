package service

import (
	"yanglu/service/model"

	"github.com/sirupsen/logrus"
)

type VulnerabilityService struct {
	hostInfo *model.HostInfo
}

func NewVulnerabilityService(ip string) (*VulnerabilityService, error) {
	h, err := model.NewHostInfo().GetHostInfoByIp(ip)
	if err != nil {
		return nil, err
	}
	return &VulnerabilityService{hostInfo: h}, nil
}

func (vs *VulnerabilityService) GetGetVulnerabilityInfo() ([]map[string]interface{}, error) {
	vl := model.NewVulnerabilityLog()
	maxId, err := vl.GetMaxTaskItemId(vs.hostInfo.Ip)
	if err != nil {
		logrus.Error("GetGetVulnerabilityInfo err ", err)
		return nil, err
	}
	list, err := model.NewVulnerabilityLog().GetLastLog(vs.hostInfo.Ip, maxId)
	logrus.Debug("list = ", list, " max_id = ", maxId)
	if err != nil {
		logrus.Error("GetGetVulnerabilityInfo err ", err)
		return nil, err
	}
	rList := make([]map[string]interface{}, len(list))
	for k, v := range list {
		rList[k] = map[string]interface{}{
			"vulnerability_id":  v.VulnerabilityId,
			"pkg_name":          v.PkgName,
			"installed_version": v.InstalledVersion,
			"severity":          v.Severity,
		}
	}
	return rList, nil
}
