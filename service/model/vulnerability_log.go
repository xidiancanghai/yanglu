package model

import (
	"errors"
	"yanglu/service/data"

	"github.com/sirupsen/logrus"
	"gorm.io/gorm"
)

type TrivyResult struct {
	Target          string             `json:"target"`
	Type            string             `json:"type"`
	Vulnerabilities []VulnerabilityLog `json:"Vulnerabilities"`
}

type VulnerabilityLog struct {
	Id               int    `json:"-"`
	Ip               string `json:"-"`
	TaskId           int    `json:"-"`
	TaskItemId       int    `json:"-"`
	VulnerabilityId  string `json:"VulnerabilityID"`
	PkgName          string `json:"PkgName"`
	InstalledVersion string `json:"InstalledVersion"`
	Severity         string `json:"Severity"`
	CreateTime       int64
}

func NewVulnerabilityLog() *VulnerabilityLog {
	return &VulnerabilityLog{}
}

func (vl *VulnerabilityLog) TableName() string {
	return "vulnerability_log"
}

func (vl *VulnerabilityLog) BatchCreate(list []*VulnerabilityLog) error {
	if len(list) == 0 {
		return errors.New("列表长度为空")
	}
	tx := data.GetDB().Create(list)
	if tx.Error != nil {
		logrus.Error("BatchCreate error", tx)
	}
	return tx.Error
}

func (vl *VulnerabilityLog) GetLastLog(ip string, taskItemId int) ([]*VulnerabilityLog, error) {
	if ip == "" {
		return nil, errors.New("")
	}
	sqll := "select id, ip, task_id, task_item_id, vulnerability_id, pkg_name, installed_version, severity, create_time, c_rank   from (  select *, case when @pre_pkg = pkg_name then @curl_rank := @curl_rank + 1 else  @curl_rank := 1 end as c_rank, @pre_pkg := pkg_name from (select * from vulnerability_log where ip = ? and task_item_id = ?  order by pkg_name, case severity when 'HIGH' then 3 when 'MEDIUM' then 2 else 0 end desc)  as p, (select @pre_pkg := '', @curl_rank := '') as t ) as t1 where c_rank = 1"
	list := []*VulnerabilityLog{}
	tx := data.GetDB().Model(vl).Raw(sqll, ip, taskItemId).Find(&list)
	if tx.Error != nil && tx.Error != gorm.ErrRecordNotFound {
		logrus.Error("GetLastLog err ", tx.Error)
		return nil, tx.Error
	}
	return list, nil
}

func (vl *VulnerabilityLog) GetMaxTaskItemId(ip string) (int, error) {
	if ip == "" {
		return 0, errors.New("参数错误")
	}
	sqll := "select task_item_id from vulnerability_log where ip = ? order by create_time desc limit 1"
	var num int = 0
	err := data.GetDB().Raw(sqll, ip).Row().Scan(&num)
	if err != nil && err != gorm.ErrRecordNotFound {
		logrus.Error("GetMaxTaskItemId err ", err)
		return 0, err
	}
	return num, nil
}

func (vl *VulnerabilityLog) HostCheckStatus(ips []string) (map[string]int, error) {
	res := map[string]int{}
	if len(ips) == 0 {
		return res, errors.New("参数错误")
	}
	sqll := "select ip, count(*) from vulnerability_log where ip in (?) group by ip"
	rows, err := data.GetDB().Raw(sqll, ips).Rows()
	if err != nil && err != gorm.ErrRecordNotFound {
		logrus.Error("HostCheckStatus err ", err)
		return res, err
	}
	if err != nil {
		return res, nil
	}
	defer rows.Close()
	for rows.Next() {
		var ip string
		var num int
		rows.Scan(&ip, &num)
		res[ip] = 2
	}
	return res, nil
}

func (vl *VulnerabilityLog) GetLastTaskItemId(ips []string) ([]int, error) {
	res := []int{}
	if len(ips) == 0 {
		return res, errors.New("参数错误")
	}
	sqll := "select ip, max(task_item_id) from vulnerability_log where ip in (?) group by ip"
	rows, err := data.GetDB().Raw(sqll, ips).Rows()
	if err != nil && err != gorm.ErrRecordNotFound {
		logrus.Error("HostCheckStatus err ", err)
		return res, err
	}
	if err != nil {
		return res, nil
	}
	defer rows.Close()
	for rows.Next() {
		var ip string
		var num int
		rows.Scan(&ip, &num)
		res = append(res, num)
	}
	return res, nil
}

func (vl *VulnerabilityLog) VulnerabilityIdDistribute(ips []string, taskItemIds []int) ([]map[string]interface{}, error) {
	res := []map[string]interface{}{}
	if len(ips) == 0 {
		return res, errors.New("参数错误")
	}
	sqll := "select vulnerability_id, count(*) as num from vulnerability_log where ip in (?) and task_item_id in (?) group by vulnerability_id order by num desc"
	rows, err := data.GetDB().Raw(sqll, ips, taskItemIds).Rows()
	if err != nil && err != gorm.ErrRecordNotFound {
		logrus.Error("HostCheckStatus err ", err)
		return res, err
	}
	if err != nil {
		return res, nil
	}
	defer rows.Close()
	for rows.Next() {
		var vulnerabilityId string
		var num int
		rows.Scan(&vulnerabilityId, &num)
		res = append(res, map[string]interface{}{
			"vulnerability_id": vulnerabilityId,
			"num":              num,
		})
	}
	return res, nil
}
